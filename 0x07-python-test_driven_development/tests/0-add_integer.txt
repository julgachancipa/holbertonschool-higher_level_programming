
================================================================
                   How to use 0-add_integer.py
================================================================

Function:    add_integer()
Description: adds 2 integers.
Prototype:   def add_integer(a, b=98):
Conditions:  - a and b must be integers
               or floats
             - a and b must be first
               casted to integers if
               they are float
________________________________________________________________
Import the function from the file:
    >>> add_integer = __import__("0-add_integer").add_integer

Now use it:
    >>> add_integer(1, 2)
    3
    >>> add_integer(None, 2)
    Traceback (most recent call last):
    TypeError: a must be an integer
    >>> add_integer(2, None)
    Traceback (most recent call last):
    TypeError: b must be an integer
    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer
    >>> add_integer(None, None)
    Traceback (most recent call last):
    TypeError: a must be an integer
    >>> add_integer(None,)
    Traceback (most recent call last):
    TypeError: a must be an integer
    >>> add_integer(2,)
    100
    >>> add_integer(4)
    102
    >>> add_integer(4.2 + 5.78)
    107
    >>> add_integer(4, 9.89)
    13
    >>> add_integer("hol", "is")
    Traceback (most recent call last):
    TypeError: a must be an integer
    >>> add_integer("hi", 4)
    Traceback (most recent call last):
    TypeError: a must be an integer
    >>> add_integer(4, "hi")
    Traceback (most recent call last):
    TypeError: b must be an integer
    >>> add_integer([2, 5], 4)
    Traceback (most recent call last):
    TypeError: a must be an integer
    >>> add_integer(2, [5, 1, 3])
    Traceback (most recent call last):
    TypeError: b must be an integer
    >>> add_integer((2, 5), 4)
    Traceback (most recent call last):
    TypeError: a must be an integer
    >>> add_integer(2, (5, 1, 3))
    Traceback (most recent call last):
    TypeError: b must be an integer
    >>> add_integer(True, 4)
    Traceback (most recent call last):
    TypeError: a must be an integer
    >>> add_integer(2, False)
    Traceback (most recent call last):
    TypeError: b must be an integer
